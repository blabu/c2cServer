/*
Package client - Содержит всю бизнес логику системы
Имеет послойную архитектуру. Каждый ВЕРХНИЙ слой зависит ИСКЛЮЧИТЕЛЬНО от следующего за ним нижестоящего.
Содержит такие слои:
	ClientLogic и ClientInterface - логика работы с клиентом. Здесь создается девайс
	Пакет deviceLogic - предоставляет доступ к данным девайса.*/
package client

import (
	"blabu/c2cService/dto"
	"time"
)

/*
ClientInterface - создает интерфейс работы с клиентом
Этот слой ответственен за базовый функционал, который должен поддерживатся всеми устройствами.
Здесь реализована логика регистрации (передачу типа), авторизации(передачу идентификатора и ключа), синхронизации(передачу времени).
Это базовый набор команд, который должен поддерживать
любое устрйоство, подключаемое к серверу
Создает инстанс девайса по его идентификатору и делегирует все не знакомые ему функции девайсу (если конечно последний авторизован)
*/
type ClientInterface interface {
	// Write - Передаем данные полученные из сети бизнес логике
	Write(msg *dto.Message) error

	//Read - читаем ответ бизнес логики return io.EOF if client never answer
	Read(dt time.Duration, handler func(msg dto.Message, err error))

	// Close - информирует бизнес логику про разрыв соединения
	Close()
}
